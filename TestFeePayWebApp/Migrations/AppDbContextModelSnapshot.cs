// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestFeePayWebApp.Models;

#nullable disable

namespace TestFeePayWebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestFeePayWebApp.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassName = "ClassOne"
                        },
                        new
                        {
                            Id = 2,
                            ClassName = "ClassTwo"
                        },
                        new
                        {
                            Id = 3,
                            ClassName = "ClassThree"
                        },
                        new
                        {
                            Id = 4,
                            ClassName = "ClassFour"
                        });
                });

            modelBuilder.Entity("TestFeePayWebApp.Models.DueBalance", b =>
                {
                    b.Property<int>("BalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BalanceId"));

                    b.Property<decimal?>("DueBalanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LustUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("BalanceId");

                    b.HasIndex("StudentId");

                    b.ToTable("dueBalances");
                });

            modelBuilder.Entity("TestFeePayWebApp.Models.FeePayment", b =>
                {
                    b.Property<int>("FeePaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeePaymentId"));

                    b.Property<decimal>("AmountAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountRemaining")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PreviousDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalFeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FeePaymentId");

                    b.HasIndex("StudentId");

                    b.ToTable("feePayments");

                    b.HasData(
                        new
                        {
                            FeePaymentId = 1,
                            AmountAfterDiscount = 2280m,
                            AmountPaid = 3000m,
                            AmountRemaining = -720m,
                            Discount = 5m,
                            Name = "Hasan",
                            PaymentDate = new DateTime(2024, 2, 14, 10, 42, 22, 787, DateTimeKind.Unspecified),
                            PreviousDue = 0m,
                            StudentId = 1,
                            TotalAmount = 2280m,
                            TotalFeeAmount = 2400m
                        },
                        new
                        {
                            FeePaymentId = 2,
                            AmountAfterDiscount = 2280m,
                            AmountPaid = 500m,
                            AmountRemaining = 1780m,
                            Discount = 5m,
                            Name = "Kamal",
                            PaymentDate = new DateTime(2024, 2, 14, 10, 42, 22, 787, DateTimeKind.Unspecified),
                            PreviousDue = 0m,
                            StudentId = 2,
                            TotalAmount = 2280m,
                            TotalFeeAmount = 2400m
                        },
                        new
                        {
                            FeePaymentId = 3,
                            AmountAfterDiscount = 2280m,
                            AmountPaid = 500m,
                            AmountRemaining = 1780m,
                            Discount = 5m,
                            Name = "Zahidul",
                            PaymentDate = new DateTime(2024, 2, 14, 10, 42, 22, 787, DateTimeKind.Unspecified),
                            PreviousDue = 0m,
                            StudentId = 3,
                            TotalAmount = 2280m,
                            TotalFeeAmount = 2400m
                        });
                });

            modelBuilder.Entity("TestFeePayWebApp.Models.FeePaymentDetail", b =>
                {
                    b.Property<int>("FeePaymentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeePaymentDetailId"));

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FeePaymentId")
                        .HasColumnType("int");

                    b.Property<string>("FeeTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeePaymentDetailId");

                    b.HasIndex("FeePaymentId");

                    b.ToTable("feePaymentDetails");

                    b.HasData(
                        new
                        {
                            FeePaymentDetailId = 1,
                            FeeAmount = 2000m,
                            FeePaymentId = 1,
                            FeeTypeName = "TuitionFee"
                        },
                        new
                        {
                            FeePaymentDetailId = 2,
                            FeeAmount = 400m,
                            FeePaymentId = 1,
                            FeeTypeName = "LibraryFee"
                        },
                        new
                        {
                            FeePaymentDetailId = 3,
                            FeeAmount = 2000m,
                            FeePaymentId = 2,
                            FeeTypeName = "TuitionFee"
                        },
                        new
                        {
                            FeePaymentDetailId = 4,
                            FeeAmount = 400m,
                            FeePaymentId = 2,
                            FeeTypeName = "LibraryFee"
                        },
                        new
                        {
                            FeePaymentDetailId = 5,
                            FeeAmount = 2500m,
                            FeePaymentId = 3,
                            FeeTypeName = "TuitionFee"
                        },
                        new
                        {
                            FeePaymentDetailId = 6,
                            FeeAmount = 500m,
                            FeePaymentId = 3,
                            FeeTypeName = "LibraryFee"
                        });
                });

            modelBuilder.Entity("TestFeePayWebApp.Models.FeeStructure", b =>
                {
                    b.Property<int>("FeeStructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeStructureId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("FeePaymentId")
                        .HasColumnType("int");

                    b.Property<int>("FeeTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Monthly")
                        .HasColumnType("bit");

                    b.Property<bool>("Yearly")
                        .HasColumnType("bit");

                    b.HasKey("FeeStructureId");

                    b.HasIndex("ClassId");

                    b.HasIndex("FeePaymentId");

                    b.HasIndex("FeeTypeId");

                    b.ToTable("feeStructures");

                    b.HasData(
                        new
                        {
                            FeeStructureId = 1,
                            ClassId = 1,
                            FeeAmount = 2000m,
                            FeeTypeId = 1,
                            Monthly = true,
                            Yearly = false
                        },
                        new
                        {
                            FeeStructureId = 2,
                            ClassId = 1,
                            FeeAmount = 400m,
                            FeeTypeId = 2,
                            Monthly = true,
                            Yearly = false
                        },
                        new
                        {
                            FeeStructureId = 3,
                            ClassId = 2,
                            FeeAmount = 2500m,
                            FeeTypeId = 1,
                            Monthly = true,
                            Yearly = false
                        },
                        new
                        {
                            FeeStructureId = 4,
                            ClassId = 2,
                            FeeAmount = 500m,
                            FeeTypeId = 2,
                            Monthly = true,
                            Yearly = false
                        },
                        new
                        {
                            FeeStructureId = 5,
                            ClassId = 3,
                            FeeAmount = 2500m,
                            FeeTypeId = 1,
                            Monthly = true,
                            Yearly = false
                        },
                        new
                        {
                            FeeStructureId = 6,
                            ClassId = 3,
                            FeeAmount = 500m,
                            FeeTypeId = 2,
                            Monthly = true,
                            Yearly = false
                        });
                });

            modelBuilder.Entity("TestFeePayWebApp.Models.FeeType", b =>
                {
                    b.Property<int>("FeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeeTypeId");

                    b.ToTable("FeeTypes");

                    b.HasData(
                        new
                        {
                            FeeTypeId = 1,
                            TypeName = "TusionFee"
                        },
                        new
                        {
                            FeeTypeId = 2,
                            TypeName = "LibraryFee"
                        },
                        new
                        {
                            FeeTypeId = 3,
                            TypeName = "TransfortFee"
                        },
                        new
                        {
                            FeeTypeId = 4,
                            TypeName = "DevelopmentFee"
                        });
                });

            modelBuilder.Entity("TestFeePayWebApp.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 1,
                            Name = "Hasan"
                        },
                        new
                        {
                            Id = 2,
                            ClassId = 1,
                            Name = "Kamal"
                        },
                        new
                        {
                            Id = 3,
                            ClassId = 2,
                            Name = "Zahidul"
                        },
                        new
                        {
                            Id = 4,
                            ClassId = 2,
                            Name = "Joynal"
                        });
                });

            modelBuilder.Entity("TestFeePayWebApp.Models.DueBalance", b =>
                {
                    b.HasOne("TestFeePayWebApp.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TestFeePayWebApp.Models.FeePayment", b =>
                {
                    b.HasOne("TestFeePayWebApp.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TestFeePayWebApp.Models.FeePaymentDetail", b =>
                {
                    b.HasOne("TestFeePayWebApp.Models.FeePayment", null)
                        .WithMany("FeePaymentDetails")
                        .HasForeignKey("FeePaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestFeePayWebApp.Models.FeeStructure", b =>
                {
                    b.HasOne("TestFeePayWebApp.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestFeePayWebApp.Models.FeePayment", "FeePayment")
                        .WithMany("FeeStructure")
                        .HasForeignKey("FeePaymentId");

                    b.HasOne("TestFeePayWebApp.Models.FeeType", "FeeType")
                        .WithMany()
                        .HasForeignKey("FeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("FeePayment");

                    b.Navigation("FeeType");
                });

            modelBuilder.Entity("TestFeePayWebApp.Models.Student", b =>
                {
                    b.HasOne("TestFeePayWebApp.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("TestFeePayWebApp.Models.FeePayment", b =>
                {
                    b.Navigation("FeePaymentDetails");

                    b.Navigation("FeeStructure");
                });
#pragma warning restore 612, 618
        }
    }
}
